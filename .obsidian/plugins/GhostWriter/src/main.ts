
import { App, Plugin, PluginSettingTab, Setting, FuzzySuggestModal, TFile, Notice, Modal, DropdownComponent, TextAreaComponent, ButtonComponent } from 'obsidian';

interface GhostWriterSettings {
    geminiAPIKey: string;
}

const DEFAULT_SETTINGS: GhostWriterSettings = {
    geminiAPIKey: ''
}

export default class GhostWriterPlugin extends Plugin {
    settings!: GhostWriterSettings;
    referenceFiles: TFile[] = [];
    prompts: string[] = [];

    async onload() {
        await this.loadSettings();
        await this.loadPrompts();
        this.addSettingTab(new GhostWriterSettingTab(this.app, this));

        // Add ribbon icon
        this.addRibbonIcon('dice', 'GhostWriter', () => {
            new GhostWriterModal(this.app, this).open();
        });
    }

    async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    }

    async saveSettings() {
        await this.saveData(this.settings);
    }

    async loadPrompts() {
        try {
            // Read prompts.json from plugin folder
            // Use getBasePath() for adapter path
            // @ts-ignore
            const pluginFolder = this.manifest.dir ?? (this.app.vault.adapter.getBasePath() + '/.obsidian/plugins/GhostWriter');
            const data = await this.app.vault.adapter.read(pluginFolder + '/prompts.json');
            this.prompts = JSON.parse(data);
        } catch (e) {
            new Notice('Could not load prompts.json');
            this.prompts = [];
        }
    }
}

// Modal for selecting multiple files
class MultiFileSuggester extends FuzzySuggestModal<TFile> {
    selectedFiles: Set<TFile>;
    onFinish: (files: TFile[]) => void;

    constructor(app: App, selectedFiles: TFile[], onFinish: (files: TFile[]) => void) {
        super(app);
        this.selectedFiles = new Set(selectedFiles);
        this.onFinish = onFinish;
    }

    getItems(): TFile[] {
        return this.app.vault.getMarkdownFiles();
    }

    getItemText(file: TFile): string {
        return file.path;
    }

    onChooseItem(file: TFile) {
        if (this.selectedFiles.has(file)) {
            this.selectedFiles.delete(file);
        } else {
            this.selectedFiles.add(file);
        }
        new Notice(`Selected: ${Array.from(this.selectedFiles).map(f => f.path).join(', ')}`);
    }

    onClose() {
        this.onFinish(Array.from(this.selectedFiles));
    }
}

// Modal for the GUI
class GhostWriterModal extends Modal {
    plugin: GhostWriterPlugin;
    selectedPrompt: string = '';
    selectedFiles: TFile[] = [];
    customPrompt: string = '';

    constructor(app: App, plugin: GhostWriterPlugin) {
        super(app);
        this.plugin = plugin;
    }

    async onOpen() {
        const { contentEl } = this;
        contentEl.empty();

        contentEl.createEl('h2', { text: 'GhostWriter' });

        // Dropdown for prompts
        contentEl.createEl('div', { text: 'Select a prompt:' });
        const dropdown = new DropdownComponent(contentEl);
        dropdown.addOptions(
            this.plugin.prompts.length > 0
                ? Object.fromEntries(this.plugin.prompts.map(p => [p, p]))
                : { '': 'No prompts found' }
        );
        dropdown.onChange(value => {
            this.selectedPrompt = value;
        });
        if (this.plugin.prompts.length > 0) {
            dropdown.setValue(this.plugin.prompts[0] ?? '');
            this.selectedPrompt = this.plugin.prompts[0] ?? '';
        }

        // Multi-file selector
        contentEl.createEl('div', { text: 'Select reference files:' });
        const fileListDiv = contentEl.createDiv();
        const updateFileList = () => {
            fileListDiv.empty();
            this.selectedFiles.forEach(file => {
                fileListDiv.createEl('div', { text: file.path });
            });
        };
        new ButtonComponent(contentEl)
            .setButtonText('Pick Files')
            .onClick(() => {
                new MultiFileSuggester(this.app, this.selectedFiles, files => {
                    this.selectedFiles = files;
                    updateFileList();
                }).open();
            });
        updateFileList();

        // Text area for custom prompt
        contentEl.createEl('div', { text: 'Custom prompt:' });
        const textArea = new TextAreaComponent(contentEl);
        textArea.setValue('');
        textArea.onChange(value => {
            this.customPrompt = value;
        });

        // Generate button
        new ButtonComponent(contentEl)
            .setButtonText('Generate')
            .setCta()
            .onClick(async () => {
                const promptText = this.customPrompt || this.selectedPrompt;
                const refFilesText = this.selectedFiles.map(f => `- ${f.path}`).join('\n');
                const mdContent = `# Generated by GhostWriter\n\n**Prompt:**\n${promptText}\n\n**Reference Files:**\n${refFilesText}\n`;
                try {
                    const fileName = `GhostWriter-${Date.now()}.md`;
                    await this.app.vault.create(fileName, mdContent);
                    new Notice(`Markdown file "${fileName}" created!`);
                    this.close();
                } catch (e) {
                    new Notice('Failed to create markdown file.');
                }
            });
    }

    onClose() {
        this.contentEl.empty();
    }
}

class GhostWriterSettingTab extends PluginSettingTab {
    plugin: GhostWriterPlugin;

    constructor(app: App, plugin: GhostWriterPlugin) {
        super(app, plugin);
        this.plugin = plugin;
    }

    display(): void {
        const { containerEl } = this;
        containerEl.empty();

        containerEl.createEl('h2', { text: 'Settings for Ghost Writer Plugin' });

        new Setting(containerEl)
            .setName('Gemini API Key')
            .setDesc('Enter your Gemini API Key here.')
            .addText(text => text
                .setPlaceholder('Enter your API Key')
                .setValue(this.plugin.settings.geminiAPIKey)
                .onChange(async (value) => {
                    this.plugin.settings.geminiAPIKey = value;
                    await this.plugin.saveSettings();
                }));
    }
}