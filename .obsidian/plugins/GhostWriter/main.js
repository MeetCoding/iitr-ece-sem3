"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const obsidian_1 = require("obsidian");
const DEFAULT_SETTINGS = {
    geminiAPIKey: ''
};
class GhostWriterPlugin extends obsidian_1.Plugin {
    constructor() {
        super(...arguments);
        this.referenceFiles = [];
        this.prompts = [];
    }
    async onload() {
        await this.loadSettings();
        await this.loadPrompts();
        this.addSettingTab(new GhostWriterSettingTab(this.app, this));
        // Add ribbon icon
        this.addRibbonIcon('dice', 'GhostWriter', () => {
            new GhostWriterModal(this.app, this).open();
        });
    }
    async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    }
    async saveSettings() {
        await this.saveData(this.settings);
    }
    async loadPrompts() {
        var _a;
        try {
            // Read prompts.json from plugin folder
            // Use getBasePath() for adapter path
            // @ts-ignore
            const pluginFolder = (_a = this.manifest.dir) !== null && _a !== void 0 ? _a : (this.app.vault.adapter.getBasePath() + '/.obsidian/plugins/GhostWriter');
            const data = await this.app.vault.adapter.read(pluginFolder + '/prompts.json');
            this.prompts = JSON.parse(data);
        }
        catch (e) {
            new obsidian_1.Notice('Could not load prompts.json');
            this.prompts = [];
        }
    }
}
exports.default = GhostWriterPlugin;
// Modal for selecting multiple files
class MultiFileSuggester extends obsidian_1.FuzzySuggestModal {
    constructor(app, selectedFiles, onFinish) {
        super(app);
        this.selectedFiles = new Set(selectedFiles);
        this.onFinish = onFinish;
    }
    getItems() {
        return this.app.vault.getMarkdownFiles();
    }
    getItemText(file) {
        return file.path;
    }
    onChooseItem(file) {
        if (this.selectedFiles.has(file)) {
            this.selectedFiles.delete(file);
        }
        else {
            this.selectedFiles.add(file);
        }
        new obsidian_1.Notice(`Selected: ${Array.from(this.selectedFiles).map(f => f.path).join(', ')}`);
    }
    onClose() {
        this.onFinish(Array.from(this.selectedFiles));
    }
}
// Modal for the GUI
class GhostWriterModal extends obsidian_1.Modal {
    constructor(app, plugin) {
        super(app);
        this.selectedPrompt = '';
        this.selectedFiles = [];
        this.customPrompt = '';
        this.plugin = plugin;
    }
    async onOpen() {
        var _a, _b;
        const { contentEl } = this;
        contentEl.empty();
        contentEl.createEl('h2', { text: 'GhostWriter' });
        // Dropdown for prompts
        contentEl.createEl('div', { text: 'Select a prompt:' });
        const dropdown = new obsidian_1.DropdownComponent(contentEl);
        dropdown.addOptions(this.plugin.prompts.length > 0
            ? Object.fromEntries(this.plugin.prompts.map(p => [p, p]))
            : { '': 'No prompts found' });
        dropdown.onChange(value => {
            this.selectedPrompt = value;
        });
        if (this.plugin.prompts.length > 0) {
            dropdown.setValue((_a = this.plugin.prompts[0]) !== null && _a !== void 0 ? _a : '');
            this.selectedPrompt = (_b = this.plugin.prompts[0]) !== null && _b !== void 0 ? _b : '';
        }
        // Multi-file selector
        contentEl.createEl('div', { text: 'Select reference files:' });
        const fileListDiv = contentEl.createDiv();
        const updateFileList = () => {
            fileListDiv.empty();
            this.selectedFiles.forEach(file => {
                fileListDiv.createEl('div', { text: file.path });
            });
        };
        new obsidian_1.ButtonComponent(contentEl)
            .setButtonText('Pick Files')
            .onClick(() => {
            new MultiFileSuggester(this.app, this.selectedFiles, files => {
                this.selectedFiles = files;
                updateFileList();
            }).open();
        });
        updateFileList();
        // Text area for custom prompt
        contentEl.createEl('div', { text: 'Custom prompt:' });
        const textArea = new obsidian_1.TextAreaComponent(contentEl);
        textArea.setValue('');
        textArea.onChange(value => {
            this.customPrompt = value;
        });
        // Generate button
        new obsidian_1.ButtonComponent(contentEl)
            .setButtonText('Generate')
            .setCta()
            .onClick(async () => {
            const promptText = this.customPrompt || this.selectedPrompt;
            const refFilesText = this.selectedFiles.map(f => `- ${f.path}`).join('\n');
            const mdContent = `# Generated by GhostWriter\n\n**Prompt:**\n${promptText}\n\n**Reference Files:**\n${refFilesText}\n`;
            try {
                const fileName = `GhostWriter-${Date.now()}.md`;
                await this.app.vault.create(fileName, mdContent);
                new obsidian_1.Notice(`Markdown file "${fileName}" created!`);
                this.close();
            }
            catch (e) {
                new obsidian_1.Notice('Failed to create markdown file.');
            }
        });
    }
    onClose() {
        this.contentEl.empty();
    }
}
class GhostWriterSettingTab extends obsidian_1.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        const { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Settings for Ghost Writer Plugin' });
        new obsidian_1.Setting(containerEl)
            .setName('Gemini API Key')
            .setDesc('Enter your Gemini API Key here.')
            .addText(text => text
            .setPlaceholder('Enter your API Key')
            .setValue(this.plugin.settings.geminiAPIKey)
            .onChange(async (value) => {
            this.plugin.settings.geminiAPIKey = value;
            await this.plugin.saveSettings();
        }));
    }
}
//# sourceMappingURL=main.js.map